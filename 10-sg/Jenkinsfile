pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
     parameters {
        choice(name: 'ACTION', choices: ['', 'apply', 'destroy'], description: 'Create or destroy infrastructure')
    }
    environment {
        AWS_REGION = 'us-east-1'
        AWS_CREDENTIALS = 'aws-creds-dev'
    }
    stages{
        stage('Check Initial Build or Without Param Action') {
            steps {
                script {
                    if (!params.ACTION) {
                        echo "Initial build detected. No action specified. Stopping further stages."
                        currentBuild.result = 'SUCCESS'
                        error("No action specified. Aborting pipeline.")
                    }
                }
            }
        }
        stage('Initialize and plan Infra') {
            when {
                expression { return params.ACTION == 'apply' || params.ACTION == 'destroy' }
            }
            steps{
                script {
                    if(params.ACTION == 'apply'){
                        echo 'Planning to apply infrastructure changes.'
                        withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                            sh '''
                                cd 10-sg
                                terraform init -reconfigure
                                terraform plan -out=tfplan
                            '''
                        }
                    }
                    else if(params.ACTION == 'destroy'){
                        echo 'Planning to destory infrastructure changes.'
                        withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                            sh '''
                                cd 10-sg
                                terraform init -reconfigure
                                terraform plan -destroy -out=tfplan
                            '''
                        }
                    }
                }
            }
        }
        stage('Create or Destroy') {
            when {
                expression { return params.ACTION == 'apply' || params.ACTION == 'destroy' }
            }
            steps{
                script {
                    try{
                        if(params.ACTION == 'apply'){
                            echo 'apply infrastructure.'
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                                sh '''
                                    cd 10-sg
                                    terraform apply -auto-approve tfplan
                                '''
                            }
                        }
                        else if(params.ACTION == 'destroy'){
                            echo 'destroy infrastructure.'
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                                sh '''
                                    cd 10-sg
                                    terraform destroy -auto-approve
                                '''
                            }
                        }
                    }catch(Exception e){
                        echo "An error occurred: ${e.message}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
         stage('Parallel') {
             when {
                expression { return params.ACTION == 'apply' }
            }
            parallel {
                stage('BASTION') {
                    steps {
                        script {
                            if(params.ACTION == 'apply'){
                                build job: '20-bastion', wait: false, parameters: [
                                    string(name: 'ACTION', value: params.ACTION)
                                ]
                            }
                        }
                    }
                }
                stage('EKS') {
                    steps {
                        script {
                            if(params.ACTION == 'apply'){
                                build job: '40-eks', wait: false, parameters: [
                                    string(name: 'ACTION', value: params.ACTION)
                                ]
                            }
                        }
                    }
                }
                stage('RDS') {
                    steps {
                        script {
                            if(params.ACTION == 'apply'){
                                build job: '30-rds', wait: false, parameters: [
                                    string(name: 'ACTION', value: params.ACTION)
                                ]
                            }
                        }
                    }
                }
                stage('ECR') {
                    steps {
                        build job: '70-ecr', parameters: [string(name: 'ACTION', value: params.ACTION)], wait: false
                    }
                }
            }
        }
        stage('Sequential') {
             when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                script {
                    def acm = build job: '50-acm', wait: true, parameters: [
                        string(name: 'ACTION', value: params.ACTION)
                    ]
                    echo "acm is completed: ${acm.result}"
                    
                    build job: '60-alb', wait: false, parameters: [
                        string(name: 'ACTION', value: params.ACTION)
                    ]                    
                    build job: '80-cdn', wait: false, parameters: [
                        string(name: 'ACTION', value: params.ACTION)
                    ]
                }
            }
        }
        // stage('Trigger Destroy VPC') {
        //     when {
        //         expression { return params.ACTION == 'destroy' }
        //     }
        //     steps {
        //         script {
        //             if(params.ACTION == 'destroy'){
        //                 build job: '00-vpc', wait: false, parameters: [
        //                     string(name: 'ACTION', value: params.ACTION)
        //                 ]
        //             }
        //         }
        //     }
        // }
    }

    post {
        always {
            ansiColor('xterm') {
                echo 'Cleaning up...'
                deleteDir()
            }
        }
        success {
            ansiColor('xterm') {
                echo 'Pipeline succeeded!'
            }
        }
        failure {
            ansiColor('xterm') {
                echo 'Pipeline failed!'
            }
        }
    }
}