pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
     parameters {
        choice(name: 'ACTION', choices: ['', 'apply', 'destroy'], description: 'Create or destroy infrastructure')
    }
    environment {
        AWS_REGION = 'us-east-1'
        AWS_CREDENTIALS = 'aws-creds-dev'
    }
    stages{
        stage('Check Initial Build or Without Param Action') {
            steps {
                script {
                    if (!params.ACTION) {
                        echo "Initial build detected. No action specified. Stopping further stages."
                        currentBuild.result = 'SUCCESS'
                        error("No action specified. Aborting pipeline.")
                    }
                }
            }
        }
        stage('Initialize and plan Infra') {
            when {
                expression { return param.ACTION == 'apply' || param.ACTION == 'destroy' }
            }
            steps{
                script {
                    try{
                        if(param.ACTION == 'apply'){
                            echo 'Planning to apply infrastructure changes.'
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                                sh '''
                                    cd 10-sg
                                    terraform init -reconfigure
                                    terraform plan -out=tfplan
                                '''
                            }
                        }
                        elseif(param.ACTION == 'destroy'){
                            echo 'Planning to apply infrastructure changes.'
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                                sh '''
                                    cd 10-sg
                                    terraform init -reconfigure
                                    terraform plan -destroy -out=tfplan
                                '''
                            }
                        }
                    }catch(Exception e){
                        echo "An error occurred: ${e.message}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }

    post {
        always {
            ansiColor('xterm') {
                echo 'Cleaning up...'
                deleteDir()
            }
        }
        success {
            ansiColor('xterm') {
                echo 'Pipeline succeeded!'
            }
        }
        failure {
            ansiColor('xterm') {
                echo 'Pipeline failed!'
            }
        }
    }
}