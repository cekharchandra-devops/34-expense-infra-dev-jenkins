pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        ansiColor('xterm')
    }
    parameters {
        choice(name: 'ACTION', choices: ['', 'apply', 'destroy'], description: 'Create or destroy infrastructure')
    }

    environment {
        AWS_REGION = 'us-east-1'
        AWS_CREDENTIALS = 'aws-creds-dev'
    }

    stages {
        stage('Check Initial Build or Without Param Action') {
            steps {
                script {
                    if (!params.ACTION) {
                        echo "Initial build detected. No action specified. Stopping further stages."
                        currentBuild.result = 'SUCCESS'
                        error("No action specified. Aborting pipeline.")
                    }
                }
            }
        }
        stage('Initialize and Plan') {
            steps {
                script {
                    try {
                        if (params.ACTION == 'apply') {
                            echo "Planning to apply infrastructure changes."
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS) {
                                sh """
                                    cd 00-vpc
                                    terraform init -reconfigure
                                    terraform plan -out=tfplan
                                """
                            }
                        } else if (params.ACTION == 'destroy') {
                            echo "Planning to destroy infrastructure."
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS) {
                                sh """
                                    cd 00-vpc
                                    terraform init -reconfigure
                                    terraform plan -destroy -out=tfplan
                                """
                            }
                        } else {
                            echo "No valid action specified. Skipping further stages."
                        }
                    } catch (Exception e) {
                        echo "An error occurred: ${e.message}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('Apply or Destroy Infra') {
            when {
                expression { return params.ACTION == 'apply' || params.ACTION == 'destroy' }
            }
            steps {
                script {
                    try {
                        if (params.ACTION == 'apply') {
                            echo "Applying infrastructure changes."
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS) {
                                sh """
                                    cd 00-vpc
                                    terraform apply -auto-approve tfplan
                                """
                            }
                            
                        } else if (params.ACTION == 'destroy') {
                            echo "Destroying infrastructure."
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS) {
                                sh """
                                    cd 00-vpc
                                    terraform destroy -auto-approve
                                """
                            }
                        }
                    } catch (Exception e) {
                        echo "An error occurred: ${e.message}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('Trigger SG'){
            when {
                expression { return params.ACTION == 'apply' }
            }
            steps {
                script {
                    if(params.ACTION == 'apply'){
                        build job: '10-sg', wait: false, parameters: [
                            [$class: 'ChoiceParameterValue', name: 'ACTION', value: params.ACTION]
                        ]
                    }
                }
            }
        }
    }
    post {
        always {
            ansiColor('xterm') {
                echo 'Cleaning up...'
                deleteDir()
            }
        }
        success {
            ansiColor('xterm') {
                echo 'Pipeline succeeded!'
            }
        }
        failure {
            ansiColor('xterm') {
                echo 'Pipeline failed!'
            }
        }
    }
}