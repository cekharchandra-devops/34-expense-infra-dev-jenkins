pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
        choice(name: 'ACTION', choices: ['', 'apply', 'destroy'], description: 'Create or destroy infrastructure')
    }
    environment {
        AWS_REGION = 'us-east-1'
        AWS_CREDENTIALS = 'aws-creds-dev'
    }

    stages {
        stage('check for initial build or without param') {
            steps {
                script {
                    if (!params.ACTION) {
                        echo "Initial build detected. No action specified. Stopping further stages."
                        currentBuild.result = 'SUCCESS'
                        error("No action specified. Aborting pipeline.")
                    }
                }
            }
        }
        stage('initialize and plan TF'){
            steps {
                script {
                    try{
                        if(params.ACTION == 'apply'){
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                                sh '''
                                    cd 30-rds
                                    terraform init -reconfigure
                                    terraform plan -out=tfplan
                                '''
                            }
                        }
                        else if(params.ACTION == 'destroy'){
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                                sh '''
                                    cd 30-rds
                                    terraform init -reconfigure
                                    terraform plan -destroy -out=tfplan
                                '''
                            }
                        }
                    }catch(Exception e){
                        echo "An error occurred: ${e.message}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('create or destroy'){
            steps {
                script {
                    try{
                        if(params.ACTION == 'apply'){
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                                sh '''
                                    cd 30-rds
                                    terraform apply -auto-approve tfplan
                                '''
                            }
                        }
                        else if(params.ACTION == 'destroy'){
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                                sh '''
                                    cd 30-rds
                                    terraform destroy -auto-approve
                                '''
                            }
                        }
                    }catch(Exception e){
                        echo "An error occurred: ${e.message}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        // stage('Destory Bastion'){
        //     steps{
        //         script{
        //             if(params.ACTION == 'destroy'){
        //                 build job: '20-bastion', wait: false, parameters: [
        //                     string(name: 'ACTION', value: params.ACTION)
        //                 ]
        //             }
        //         }
        //     }
        // }
    }
}