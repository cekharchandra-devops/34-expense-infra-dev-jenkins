pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
        choice(name: 'ACTION', choices: ['', 'apply', 'destroy'], description: 'Create or destroy infrastructure')
    }
    environment {
         AWS_REGION = 'us-east-1'
        AWS_CREDENTIALS = 'aws-creds-dev'
    }
    stages {
        stage('check for initial build or without Parameter'){
            steps{
                script{
                    if (!params.ACTION) {
                        echo "Initial build detected. No action specified. Stopping further stages."
                        currentBuild.result = 'SUCCESS'
                        error("No action specified. Aborting pipeline.")
                    }
                }
            }
        }
        stage('init and plan'){
            steps{
                script {
                    if(params.ACTION == 'apply'){
                        withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                            sh '''
                                cd 80-cdn
                                terraform init -reconfigure
                                terraform plan -out=tfplan
                            '''
                        }
                    }
                    else if(params.ACTION == 'destroy'){
                        withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                            sh '''
                                cd 80-cdn
                                terraform init -reconfigure
                                terraform plan -destroy -out=tfplan
                            '''
                        }
                    }
                }
            }
        }
        stage('Create Infra'){
            steps{
                script {
                    try{
                        if(params.ACTION == 'apply'){
                            withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                                sh '''
                                    cd 80-cdn
                                    terraform apply -auto-approve tfplan
                                '''
                            }
                        }
                        // else if(params.ACTION == 'destroy'){
                        //     sh '''
                        //         cd 80-cdn
                        //         terraform destory -auto-approve
                        //     '''
                        // }
                    } catch (Exception e) {
                        echo "An error occurred: ${e.message}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('Destroy All Infra modules') {
            when {
                expression { return params.ACTION == 'destroy' }
            }
            steps {
                script {
                    withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS){
                        def repos = ['80-cdn', '70-ecr', '60-alb', '50-acm', '40-eks', '30-rds', '20-bastion', '10-sg', '00-vpc']
                        for(repo in repos) {
                            echo "Destroying resources in directory: ${repo}"
                            sh '''
                                cd ${repo}
                                terraform init -reconfigure
                                terraform destroy -auto-apporve || { echo "Failed to destroy resources in ${repo}"; exit 1; }
                                cd ..
                            '''
                        }
                    }
                }
            }
        }
    }

     post {
        always {
            ansiColor('xterm') {
                echo 'Cleaning up...'
                deleteDir()
            }
        }
        success {
            ansiColor('xterm') {
                echo 'Pipeline succeeded!'
            }
        }
        failure {
            ansiColor('xterm') {
                echo 'Pipeline failed!'
            }
        }
    }
}